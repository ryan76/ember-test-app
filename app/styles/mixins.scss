// Strips units from a number
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Converts px to rem
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return #{$remSize}rem;
}

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

// Accepts px or rem values and produces property in rem with px fallback
// Usage: @include rem(padding, 20px 10px);
// You must include the correct units for values
// Doesnâ€™t work with all properties (border shorthand among others): use calculateRem for those
// To use rem, the html font-size must be set to 62.5%
// See: http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@mixin rem($property, $values) {
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}
